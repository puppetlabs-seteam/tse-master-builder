#!groovy
import org.yaml.snakeyaml.Yaml
import groovy.json.JsonOutput
config = [:]

node {
  stage("Setup") {
    git branch: env.BUILD_BRANCH, changelog: false, poll: false, url: 'https://github.com/puppetlabs-seteam/tse-master-builder.git'

    config['source_ova'] = env.SOURCE_OVA
    config['s3_bucket'] = env.S3_BUCKET
    config['s3_key'] = env.S3_KEY
    config['build_notice'] = env.BUILD_NOTICE

    if (!config['source_ova']?.trim()) {
      error("FAILED - SOURCE_OVA parameter cannot be left empty!")
    }

    if (!config['s3_bucket']?.trim()) {
      error("FAILED - S3_BUCKET parameter cannot be left empty!")
    }

    if (!config['s3_key']?.trim()) {
      error("FAILED - S3_KEY parameter cannot be left empty!")
    }

    if (!config['build_notice']?.trim()) {
      error("FAILED - BUILD_NOTICE parameter cannot be left empty!")
    }

    sh(script:'pip install awscli --upgrade --user')
  }

  stage("Upload/Convert") {
    options {
      timeout(time: 2, unit: 'HOURS')
    }
    steps {
      withCredentials(
        [
          usernamePassword(credentialsId: 'puppetlabs-seteam-aws-cred', passwordVariable: 'aws_acckey', usernameVariable: 'aws_skey'),
        ]
      ){
        withEnv([
          "AWS_ACCESS_KEY_ID=${aws_acckey}",
          "AWS_SECRET_ACCESS_KEY=${aws_skey}",
          "AWS_DEFAULT_REGION=us-west-2"
        ]) {
          def bucket = [:]
          bucket["S3Bucket"] = config['s3_bucket']
          bucket["S3Key"] = config['s3_key']

          def jsonconfig = [:]
          jsonconfig['Description'] = "SE Demo Puppetmaster OVA"
          jsonconfig['Format'] = "ova"
          jsonconfig['UserBucket'] = bucket

          def clioption = JsonOutput.toJson([test])

          // Kickoff job
          def xml = sh(returnStdout: true, script: "aws ec2 import-image --cli-input-json ${clioption}")
          def ami_job = new XmlSlurper().parseText(xml).importTaskId

          //Get the new AMI id
          def xml = sh(returnStdout: true, script: "aws ec2 describe-import-image-tasks --import-task-ids ${ami_job}")
          def imageId = new XmlSlurper().parseText(xml).imageId

          //Wait for it to complete
          waitUntil {
            def xml = sh(returnStdout: true, script: "aws ec2 describe-import-image-tasks --import-task-ids ${ami_job}")
            def status = new XmlSlurper().parseText(xml).status

            if (status == 'completed'){
              return true
            } else {
              return false
            }
          }

          //Notify as long as imageId is set
          if (!imageId?.trim()) {
            emailext body: "New SE Demo Env AMI has been published!\n\nSource OVA: ${config['source_ova']}\n\nNew AMI: ${imageId}", subject: "[SE Demo Environment] - New AMI Released! (${imageID} from source ${config['source_ova']})", to: "${config['build_notice']}", replyTo: 'noreply@puppet.com'
          } else {
             println("FAIL: ImageId is not set - something went wrong!")
             throw error
          }
        }
      }
    }
  }
}
