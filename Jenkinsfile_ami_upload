#!groovy
import org.yaml.snakeyaml.Yaml
import groovy.json.JsonOutput
import groovy.json.JsonSlurperClassic

config = [:]
imageId = ''

node ('tse-master-builder-vmware') {
  stage("Setup") {
    git branch: env.BUILD_BRANCH, changelog: false, poll: false, url: 'https://github.com/puppetlabs-seteam/tse-master-builder.git'

    config['source_ova'] = env.SOURCE_OVA
    config['s3_bucket'] = env.S3_BUCKET
    config['s3_key'] = env.S3_KEY
    config['build_notice'] = env.BUILD_NOTICE

    if (!config['source_ova']?.trim()) {
      error("FAILED - SOURCE_OVA parameter cannot be left empty!")
    }

    if (!config['s3_bucket']?.trim()) {
      error("FAILED - S3_BUCKET parameter cannot be left empty!")
    }

    if (!config['s3_key']?.trim()) {
      error("FAILED - S3_KEY parameter cannot be left empty!")
    }

    if (!config['build_notice']?.trim()) {
      error("FAILED - BUILD_NOTICE parameter cannot be left empty!")
    }

  }

  stage("Upload/Convert") {
    withEnv([
      "PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/MacGPG2/bin"
    ]) {
      def bucket = [:]
      bucket["S3Bucket"] = config['s3_bucket']
      bucket["S3Key"] = config['s3_key']

      def jsonconfig = [:]
      jsonconfig['Description'] = "SE Demo Puppetmaster OVA"
      jsonconfig['Format'] = "ova"
      jsonconfig['UserBucket'] = bucket
      def clioption = [ jsonconfig ]
      def json = JsonOutput.toJson(clioption)
      writeFile file: "containers.json", text: json

      // Kickoff job
      def json1 = sh(
        returnStdout: true,
        script: "aws ec2 import-image --license-type BYOL  --disk-containers file://containers.json --region us-west-2"
      )
      def ami_job = new JsonSlurperClassic().parseText(json1)['ImportTaskId']

      //Get the new AMI id
      def json2 = sh(returnStdout: true,
                     script: "aws ec2 describe-import-image-tasks --import-task-ids ${ami_job} --region us-west-2"
                    )

      //Wait for it to complete
      timeout(time: 2, unit: 'HOURS'){
        waitUntil {
          def json3 = sh(returnStdout: true,
                         script: "aws ec2 describe-import-image-tasks --import-task-ids ${ami_job} --region us-west-2"
                        )
          def status = new JsonSlurperClassic().parseText(json3)['ImportImageTasks'][0]['Status']

          if (status == 'completed'){
            imageId = new JsonSlurperClassic().parseText(json3)['ImportImageTasks'][0]['ImageId']
            return true
          } else {
            sleep 300
            return false
          }

        }
      }

      //Tag New Image
      sh("aws ec2 create-tags --resources ${imageId} --region us-west-2 --tags Key=Name,Value=${config['source_ova']} Key=created_by,Value=tse_jenkins Key=department,Value=tse Key=project,Value=tse-demo-env")

      //Copy to all required regions
      image_ids = [:]
      image_ids['us-west-2'] = imageId

      regions = ['us-east-1', 'eu-west-2','eu-west-3','eu-central-1','ap-southeast-2','ap-southeast-1']
      for ( int i = 0; i < regions.size(); i++ ) {
        def cur_reg = regions[i]
        def j = sh(
          returnStdout: true,
          script: "aws ec2 copy-image --source-image-id ${imageId} --source-region us-west-2 --region ${cur_reg} --name ${config['source_ova']}"
        )

        def id = new JsonSlurperClassic().parseText(j)['ImageId']
        image_ids[cur_reg] = id

        sh("aws ec2 create-tags --resources ${id} --region ${cur_reg} --tags Key=Name,Value=${config['source_ova']} Key=created_by,Value=tse_jenkins Key=department,Value=tse Key=project,Value=tse-demo-env")
        
        // Add launch permission from the TSE account to the new AMI
        def launch_permission = "{\"Add\":[{\"UserId\":\"221643363539\"}]}"
        sh("aws ec2 modify-image-attribute --image-id ${id} --region ${cur_reg} --launch-permission ${launch_permission}")
      }

      emailext (
        to: "${config['build_notice']}",
        replyTo: 'noreply@puppet.com',
        subject: "[SE Demo Environment] - New AMIs Released from source ${config['source_ova']}!",
        body:
          """
             New SE Demo Env AMI has been published!

             Source OVA: ${config['source_ova']}
             New AMIs:
                us-west-2 (US/Canada):      ${image_ids['us-west-2']}
                eu-west-2 (London):         ${image_ids['eu-west-2']}
                eu-west-3 (Paris):          ${image_ids['eu-west-3']}
                eu-central-1 (Frankfurt):   ${image_ids['eu-central-1']}
                ap-southeast-2 (Sydney):    ${image_ids['ap-southeast-2']}
                ap-southeast-1 (Singapore): ${image_ids['ap-southeast-1']}
          """
      )

    }
  }
}
